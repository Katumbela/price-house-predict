[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "pesticides",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "pesticides = pd.read_csv('./mnt/pesticides.csv')\nrainfall = pd.read_csv('./mnt/rainfall.csv')\ntemp = pd.read_csv('./mnt/temp.csv')\nyield_data = pd.read_csv('./mnt/yield.csv')\nyield_df = pd.read_csv('./mnt/yield_df.csv')\nprint(\"Pesticides:\")\nprint(pesticides.head())\nprint(\"\\nRainfall:\")\nprint(rainfall.head())\nprint(\"\\nTemperature:\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "rainfall",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "rainfall = pd.read_csv('./mnt/rainfall.csv')\ntemp = pd.read_csv('./mnt/temp.csv')\nyield_data = pd.read_csv('./mnt/yield.csv')\nyield_df = pd.read_csv('./mnt/yield_df.csv')\nprint(\"Pesticides:\")\nprint(pesticides.head())\nprint(\"\\nRainfall:\")\nprint(rainfall.head())\nprint(\"\\nTemperature:\")\nprint(temp.head())",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "temp = pd.read_csv('./mnt/temp.csv')\nyield_data = pd.read_csv('./mnt/yield.csv')\nyield_df = pd.read_csv('./mnt/yield_df.csv')\nprint(\"Pesticides:\")\nprint(pesticides.head())\nprint(\"\\nRainfall:\")\nprint(rainfall.head())\nprint(\"\\nTemperature:\")\nprint(temp.head())\nprint(\"\\nYield:\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "yield_data",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "yield_data = pd.read_csv('./mnt/yield.csv')\nyield_df = pd.read_csv('./mnt/yield_df.csv')\nprint(\"Pesticides:\")\nprint(pesticides.head())\nprint(\"\\nRainfall:\")\nprint(rainfall.head())\nprint(\"\\nTemperature:\")\nprint(temp.head())\nprint(\"\\nYield:\")\nprint(yield_data.head())",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "yield_df",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "yield_df = pd.read_csv('./mnt/yield_df.csv')\nprint(\"Pesticides:\")\nprint(pesticides.head())\nprint(\"\\nRainfall:\")\nprint(rainfall.head())\nprint(\"\\nTemperature:\")\nprint(temp.head())\nprint(\"\\nYield:\")\nprint(yield_data.head())\nprint(\"\\nYield DF:\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "combined_data",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "combined_data = yield_data.merge(pesticides, on=['Area', 'Year'])\ncombined_data = combined_data.merge(rainfall, left_on=['Area', 'Year'], right_on=[' Area', 'Year'])\ncombined_data = combined_data.merge(temp, left_on=['Year'], right_on=['year'])\ncombined_data = combined_data.merge(yield_df, on=['Area', 'Year'])\nX_agro = combined_data.drop(['hg/ha_yield'], axis=1)  \ny_agro = combined_data['hg/ha_yield']\nX_train_agro, X_test_agro, y_train_agro, y_test_agro = train_test_split(X_agro, y_agro, test_size=0.2, random_state=42)\nmodel_agro = RandomForestRegressor()\nmodel_agro.fit(X_train_agro, y_train_agro)\nscore = model_agro.score(X_test_agro, y_test_agro)",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "combined_data",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "combined_data = combined_data.merge(rainfall, left_on=['Area', 'Year'], right_on=[' Area', 'Year'])\ncombined_data = combined_data.merge(temp, left_on=['Year'], right_on=['year'])\ncombined_data = combined_data.merge(yield_df, on=['Area', 'Year'])\nX_agro = combined_data.drop(['hg/ha_yield'], axis=1)  \ny_agro = combined_data['hg/ha_yield']\nX_train_agro, X_test_agro, y_train_agro, y_test_agro = train_test_split(X_agro, y_agro, test_size=0.2, random_state=42)\nmodel_agro = RandomForestRegressor()\nmodel_agro.fit(X_train_agro, y_train_agro)\nscore = model_agro.score(X_test_agro, y_test_agro)\nprint(f\"Acurácia do modelo: {score}\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "combined_data",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "combined_data = combined_data.merge(temp, left_on=['Year'], right_on=['year'])\ncombined_data = combined_data.merge(yield_df, on=['Area', 'Year'])\nX_agro = combined_data.drop(['hg/ha_yield'], axis=1)  \ny_agro = combined_data['hg/ha_yield']\nX_train_agro, X_test_agro, y_train_agro, y_test_agro = train_test_split(X_agro, y_agro, test_size=0.2, random_state=42)\nmodel_agro = RandomForestRegressor()\nmodel_agro.fit(X_train_agro, y_train_agro)\nscore = model_agro.score(X_test_agro, y_test_agro)\nprint(f\"Acurácia do modelo: {score}\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "combined_data",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "combined_data = combined_data.merge(yield_df, on=['Area', 'Year'])\nX_agro = combined_data.drop(['hg/ha_yield'], axis=1)  \ny_agro = combined_data['hg/ha_yield']\nX_train_agro, X_test_agro, y_train_agro, y_test_agro = train_test_split(X_agro, y_agro, test_size=0.2, random_state=42)\nmodel_agro = RandomForestRegressor()\nmodel_agro.fit(X_train_agro, y_train_agro)\nscore = model_agro.score(X_test_agro, y_test_agro)\nprint(f\"Acurácia do modelo: {score}\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "X_agro",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "X_agro = combined_data.drop(['hg/ha_yield'], axis=1)  \ny_agro = combined_data['hg/ha_yield']\nX_train_agro, X_test_agro, y_train_agro, y_test_agro = train_test_split(X_agro, y_agro, test_size=0.2, random_state=42)\nmodel_agro = RandomForestRegressor()\nmodel_agro.fit(X_train_agro, y_train_agro)\nscore = model_agro.score(X_test_agro, y_test_agro)\nprint(f\"Acurácia do modelo: {score}\")\njoblib.dump(model_agro, './models/agro_yield_model.pkl')\nprint(\"Modelo de Agronegócio treinado e salvo como 'agro_yield_model.pkl'\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "y_agro",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "y_agro = combined_data['hg/ha_yield']\nX_train_agro, X_test_agro, y_train_agro, y_test_agro = train_test_split(X_agro, y_agro, test_size=0.2, random_state=42)\nmodel_agro = RandomForestRegressor()\nmodel_agro.fit(X_train_agro, y_train_agro)\nscore = model_agro.score(X_test_agro, y_test_agro)\nprint(f\"Acurácia do modelo: {score}\")\njoblib.dump(model_agro, './models/agro_yield_model.pkl')\nprint(\"Modelo de Agronegócio treinado e salvo como 'agro_yield_model.pkl'\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "model_agro",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "model_agro = RandomForestRegressor()\nmodel_agro.fit(X_train_agro, y_train_agro)\nscore = model_agro.score(X_test_agro, y_test_agro)\nprint(f\"Acurácia do modelo: {score}\")\njoblib.dump(model_agro, './models/agro_yield_model.pkl')\nprint(\"Modelo de Agronegócio treinado e salvo como 'agro_yield_model.pkl'\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "agro_business",
        "description": "agro_business",
        "peekOfCode": "score = model_agro.score(X_test_agro, y_test_agro)\nprint(f\"Acurácia do modelo: {score}\")\njoblib.dump(model_agro, './models/agro_yield_model.pkl')\nprint(\"Modelo de Agronegócio treinado e salvo como 'agro_yield_model.pkl'\")",
        "detail": "agro_business",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/api/predict/house', methods=['POST'])\ndef predict_house():\n    data = request.get_json(force=True)\n    features = [data['area'], data['bedrooms'], data['bathrooms']]\n    prediction_usd = model_house.predict([features])\n    exchange_rate = 870\n    prediction_aoa = prediction_usd[0] * exchange_rate\n    return jsonify({",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "predict_house",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def predict_house():\n    data = request.get_json(force=True)\n    features = [data['area'], data['bedrooms'], data['bathrooms']]\n    prediction_usd = model_house.predict([features])\n    exchange_rate = 870\n    prediction_aoa = prediction_usd[0] * exchange_rate\n    return jsonify({\n        'predicted_price_usd': prediction_usd[0],\n        'predicted_price_aoa': prediction_aoa\n    })",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "predict_agro",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def predict_agro():\n    data = request.get_json(force=True)\n    features = [data['rainfall'], data['temperature'], data['humidity']]\n    prediction = model_agro.predict([features])\n    return jsonify({'predicted_yield': prediction[0]})\n\"\"\"\n@app.route('/api/predict/hr', methods=['POST'])\ndef predict_hr():\n    data = request.get_json(force=True)\n    print(\"Dados recebidos:\", data)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "predict_hr",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def predict_hr():\n    data = request.get_json(force=True)\n    print(\"Dados recebidos:\", data)\n    features = [data['satisfaction_level'], data['last_evaluation'], data['number_project'], \n                data['average_montly_hours'], data['time_spend_company'], data['Work_accident'], \n                data['promotion_last_5years'], data['sales'], data['salary']]\n    print(\"Features utilizadas:\", features)\n    prediction = model_hr.predict([features])\n    print(\"Predição do modelo:\", prediction)\n    # Convertendo para float para garantir que seja serializável para JSON",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "predict_manuf",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def predict_manuf():\n    data = request.get_json(force=True)\n    features = [data['machine_id'], data['temperature'], data['pressure']]\n    prediction = model_manuf.predict([features])\n    return jsonify({'predicted_output': prediction[0]})\n@app.route('/api/predict/finance', methods=['POST'])\ndef predict_finance():\n    data = request.get_json(force=True)\n    features = [data['open'], data['high'], data['low'], data['volume']]\n    prediction = model_finance.predict([features])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "predict_finance",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def predict_finance():\n    data = request.get_json(force=True)\n    features = [data['open'], data['high'], data['low'], data['volume']]\n    prediction = model_finance.predict([features])\n    return jsonify({'predicted_close': prediction[0]})\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model_house",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model_house = joblib.load('./models/house_price_model.pkl')\n#model_agro = joblib.load('./models/agro_yield_model.pkl')\nmodel_hr = joblib.load('./models/hr_turnover_model.pkl')\nmodel_manuf = joblib.load('./models/manuf_output_model.pkl')\nmodel_finance = joblib.load('./models/finance_stock_model.pkl')\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/api/predict/house', methods=['POST'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "#model_agro",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "#model_agro = joblib.load('./models/agro_yield_model.pkl')\nmodel_hr = joblib.load('./models/hr_turnover_model.pkl')\nmodel_manuf = joblib.load('./models/manuf_output_model.pkl')\nmodel_finance = joblib.load('./models/finance_stock_model.pkl')\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/api/predict/house', methods=['POST'])\ndef predict_house():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model_hr",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model_hr = joblib.load('./models/hr_turnover_model.pkl')\nmodel_manuf = joblib.load('./models/manuf_output_model.pkl')\nmodel_finance = joblib.load('./models/finance_stock_model.pkl')\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/api/predict/house', methods=['POST'])\ndef predict_house():\n    data = request.get_json(force=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model_manuf",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model_manuf = joblib.load('./models/manuf_output_model.pkl')\nmodel_finance = joblib.load('./models/finance_stock_model.pkl')\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/api/predict/house', methods=['POST'])\ndef predict_house():\n    data = request.get_json(force=True)\n    features = [data['area'], data['bedrooms'], data['bathrooms']]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model_finance",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model_finance = joblib.load('./models/finance_stock_model.pkl')\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/api/predict/house', methods=['POST'])\ndef predict_house():\n    data = request.get_json(force=True)\n    features = [data['area'], data['bedrooms'], data['bathrooms']]\n    prediction_usd = model_house.predict([features])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/api/predict/house', methods=['POST'])\ndef predict_house():\n    data = request.get_json(force=True)\n    features = [data['area'], data['bedrooms'], data['bathrooms']]\n    prediction_usd = model_house.predict([features])\n    exchange_rate = 870",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "data_finance",
        "kind": 5,
        "importPath": "finance_model",
        "description": "finance_model",
        "peekOfCode": "data_finance = {\n    'open': [100, 110, 105, 115, 120],\n    'high': [105, 115, 110, 120, 125],\n    'low': [95, 105, 100, 110, 115],\n    'close': [102, 112, 107, 117, 122],\n    'volume': [1000, 1500, 1200, 1300, 1600]\n}\ndf_finance = pd.DataFrame(data_finance)\nX_finance = df_finance.drop('close', axis=1)\ny_finance = df_finance['close']",
        "detail": "finance_model",
        "documentation": {}
    },
    {
        "label": "df_finance",
        "kind": 5,
        "importPath": "finance_model",
        "description": "finance_model",
        "peekOfCode": "df_finance = pd.DataFrame(data_finance)\nX_finance = df_finance.drop('close', axis=1)\ny_finance = df_finance['close']\nX_train_finance, X_test_finance, y_train_finance, y_test_finance = train_test_split(X_finance, y_finance, test_size=0.2, random_state=42)\nmodel_finance = RandomForestRegressor()\nmodel_finance.fit(X_train_finance, y_train_finance)\njoblib.dump(model_finance, './models/finance_stock_model.pkl')\nprint(\"Modelo de Finanças treinado e salvo como 'finance_stock_model.pkl'\")",
        "detail": "finance_model",
        "documentation": {}
    },
    {
        "label": "X_finance",
        "kind": 5,
        "importPath": "finance_model",
        "description": "finance_model",
        "peekOfCode": "X_finance = df_finance.drop('close', axis=1)\ny_finance = df_finance['close']\nX_train_finance, X_test_finance, y_train_finance, y_test_finance = train_test_split(X_finance, y_finance, test_size=0.2, random_state=42)\nmodel_finance = RandomForestRegressor()\nmodel_finance.fit(X_train_finance, y_train_finance)\njoblib.dump(model_finance, './models/finance_stock_model.pkl')\nprint(\"Modelo de Finanças treinado e salvo como 'finance_stock_model.pkl'\")",
        "detail": "finance_model",
        "documentation": {}
    },
    {
        "label": "y_finance",
        "kind": 5,
        "importPath": "finance_model",
        "description": "finance_model",
        "peekOfCode": "y_finance = df_finance['close']\nX_train_finance, X_test_finance, y_train_finance, y_test_finance = train_test_split(X_finance, y_finance, test_size=0.2, random_state=42)\nmodel_finance = RandomForestRegressor()\nmodel_finance.fit(X_train_finance, y_train_finance)\njoblib.dump(model_finance, './models/finance_stock_model.pkl')\nprint(\"Modelo de Finanças treinado e salvo como 'finance_stock_model.pkl'\")",
        "detail": "finance_model",
        "documentation": {}
    },
    {
        "label": "model_finance",
        "kind": 5,
        "importPath": "finance_model",
        "description": "finance_model",
        "peekOfCode": "model_finance = RandomForestRegressor()\nmodel_finance.fit(X_train_finance, y_train_finance)\njoblib.dump(model_finance, './models/finance_stock_model.pkl')\nprint(\"Modelo de Finanças treinado e salvo como 'finance_stock_model.pkl'\")",
        "detail": "finance_model",
        "documentation": {}
    },
    {
        "label": "df_hr",
        "kind": 5,
        "importPath": "hr_model",
        "description": "hr_model",
        "peekOfCode": "df_hr = pd.read_csv('./csvs/HR_comma_sep.csv')\nX_hr = df_hr.drop('left', axis=1)\ny_hr = df_hr['left']\nlabel_encoder = LabelEncoder()\nX_hr_encoded = X_hr.apply(label_encoder.fit_transform)\nX_train_hr, X_test_hr, y_train_hr, y_test_hr = train_test_split(X_hr_encoded, y_hr, test_size=0.2, random_state=42)\nmodel_hr = RandomForestClassifier()\nmodel_hr.fit(X_train_hr, y_train_hr)\njoblib.dump(model_hr, './models/hr_turnover_model.pkl')\nprint(\"HR model trained and saved as 'hr_turnover_model.pkl' finaly hahah\")",
        "detail": "hr_model",
        "documentation": {}
    },
    {
        "label": "X_hr",
        "kind": 5,
        "importPath": "hr_model",
        "description": "hr_model",
        "peekOfCode": "X_hr = df_hr.drop('left', axis=1)\ny_hr = df_hr['left']\nlabel_encoder = LabelEncoder()\nX_hr_encoded = X_hr.apply(label_encoder.fit_transform)\nX_train_hr, X_test_hr, y_train_hr, y_test_hr = train_test_split(X_hr_encoded, y_hr, test_size=0.2, random_state=42)\nmodel_hr = RandomForestClassifier()\nmodel_hr.fit(X_train_hr, y_train_hr)\njoblib.dump(model_hr, './models/hr_turnover_model.pkl')\nprint(\"HR model trained and saved as 'hr_turnover_model.pkl' finaly hahah\")",
        "detail": "hr_model",
        "documentation": {}
    },
    {
        "label": "y_hr",
        "kind": 5,
        "importPath": "hr_model",
        "description": "hr_model",
        "peekOfCode": "y_hr = df_hr['left']\nlabel_encoder = LabelEncoder()\nX_hr_encoded = X_hr.apply(label_encoder.fit_transform)\nX_train_hr, X_test_hr, y_train_hr, y_test_hr = train_test_split(X_hr_encoded, y_hr, test_size=0.2, random_state=42)\nmodel_hr = RandomForestClassifier()\nmodel_hr.fit(X_train_hr, y_train_hr)\njoblib.dump(model_hr, './models/hr_turnover_model.pkl')\nprint(\"HR model trained and saved as 'hr_turnover_model.pkl' finaly hahah\")",
        "detail": "hr_model",
        "documentation": {}
    },
    {
        "label": "label_encoder",
        "kind": 5,
        "importPath": "hr_model",
        "description": "hr_model",
        "peekOfCode": "label_encoder = LabelEncoder()\nX_hr_encoded = X_hr.apply(label_encoder.fit_transform)\nX_train_hr, X_test_hr, y_train_hr, y_test_hr = train_test_split(X_hr_encoded, y_hr, test_size=0.2, random_state=42)\nmodel_hr = RandomForestClassifier()\nmodel_hr.fit(X_train_hr, y_train_hr)\njoblib.dump(model_hr, './models/hr_turnover_model.pkl')\nprint(\"HR model trained and saved as 'hr_turnover_model.pkl' finaly hahah\")",
        "detail": "hr_model",
        "documentation": {}
    },
    {
        "label": "X_hr_encoded",
        "kind": 5,
        "importPath": "hr_model",
        "description": "hr_model",
        "peekOfCode": "X_hr_encoded = X_hr.apply(label_encoder.fit_transform)\nX_train_hr, X_test_hr, y_train_hr, y_test_hr = train_test_split(X_hr_encoded, y_hr, test_size=0.2, random_state=42)\nmodel_hr = RandomForestClassifier()\nmodel_hr.fit(X_train_hr, y_train_hr)\njoblib.dump(model_hr, './models/hr_turnover_model.pkl')\nprint(\"HR model trained and saved as 'hr_turnover_model.pkl' finaly hahah\")",
        "detail": "hr_model",
        "documentation": {}
    },
    {
        "label": "model_hr",
        "kind": 5,
        "importPath": "hr_model",
        "description": "hr_model",
        "peekOfCode": "model_hr = RandomForestClassifier()\nmodel_hr.fit(X_train_hr, y_train_hr)\njoblib.dump(model_hr, './models/hr_turnover_model.pkl')\nprint(\"HR model trained and saved as 'hr_turnover_model.pkl' finaly hahah\")",
        "detail": "hr_model",
        "documentation": {}
    },
    {
        "label": "data_manuf",
        "kind": 5,
        "importPath": "manufacture_model",
        "description": "manufacture_model",
        "peekOfCode": "data_manuf = {\n    'machine_id': [1, 2, 3, 4, 5],\n    'temperature': [300, 310, 305, 315, 320],\n    'pressure': [30, 32, 31, 33, 34],\n    'output': [500, 520, 510, 530, 540]\n}\nnovos_dados = {\n    'machine_id': [6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                   16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35],",
        "detail": "manufacture_model",
        "documentation": {}
    },
    {
        "label": "novos_dados",
        "kind": 5,
        "importPath": "manufacture_model",
        "description": "manufacture_model",
        "peekOfCode": "novos_dados = {\n    'machine_id': [6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                   16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n                   26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n    'temperature': [325, 330, 335, 340, 345, 350, 355, 360, 365, 370,\n                    375, 380, 385, 390, 395, 400, 405, 410, 415, 420,\n                    425, 430, 435, 440, 445, 450, 455, 460, 465, 470],\n    'pressure': [35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n                 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\n                 55, 56, 57, 58, 59, 60, 61, 62, 63, 64],",
        "detail": "manufacture_model",
        "documentation": {}
    },
    {
        "label": "df_manuf",
        "kind": 5,
        "importPath": "manufacture_model",
        "description": "manufacture_model",
        "peekOfCode": "df_manuf = pd.concat([pd.DataFrame(data_manuf), pd.DataFrame(novos_dados)], ignore_index=True)\nX_manuf = df_manuf.drop('output', axis=1)\ny_manuf = df_manuf['output']\nX_train_manuf, X_test_manuf, y_train_manuf, y_test_manuf = train_test_split(X_manuf, y_manuf, test_size=0.2, random_state=42)\nmodel_manuf = RandomForestRegressor()\nmodel_manuf.fit(X_train_manuf, y_train_manuf)\njoblib.dump(model_manuf, './models/manuf_output_model.pkl')\nprint(\"Modelo de Manufatura treinado e salvo como 'manuf_output_model.pkl'\")",
        "detail": "manufacture_model",
        "documentation": {}
    },
    {
        "label": "X_manuf",
        "kind": 5,
        "importPath": "manufacture_model",
        "description": "manufacture_model",
        "peekOfCode": "X_manuf = df_manuf.drop('output', axis=1)\ny_manuf = df_manuf['output']\nX_train_manuf, X_test_manuf, y_train_manuf, y_test_manuf = train_test_split(X_manuf, y_manuf, test_size=0.2, random_state=42)\nmodel_manuf = RandomForestRegressor()\nmodel_manuf.fit(X_train_manuf, y_train_manuf)\njoblib.dump(model_manuf, './models/manuf_output_model.pkl')\nprint(\"Modelo de Manufatura treinado e salvo como 'manuf_output_model.pkl'\")",
        "detail": "manufacture_model",
        "documentation": {}
    },
    {
        "label": "y_manuf",
        "kind": 5,
        "importPath": "manufacture_model",
        "description": "manufacture_model",
        "peekOfCode": "y_manuf = df_manuf['output']\nX_train_manuf, X_test_manuf, y_train_manuf, y_test_manuf = train_test_split(X_manuf, y_manuf, test_size=0.2, random_state=42)\nmodel_manuf = RandomForestRegressor()\nmodel_manuf.fit(X_train_manuf, y_train_manuf)\njoblib.dump(model_manuf, './models/manuf_output_model.pkl')\nprint(\"Modelo de Manufatura treinado e salvo como 'manuf_output_model.pkl'\")",
        "detail": "manufacture_model",
        "documentation": {}
    },
    {
        "label": "model_manuf",
        "kind": 5,
        "importPath": "manufacture_model",
        "description": "manufacture_model",
        "peekOfCode": "model_manuf = RandomForestRegressor()\nmodel_manuf.fit(X_train_manuf, y_train_manuf)\njoblib.dump(model_manuf, './models/manuf_output_model.pkl')\nprint(\"Modelo de Manufatura treinado e salvo como 'manuf_output_model.pkl'\")",
        "detail": "manufacture_model",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "predict_house_price_model",
        "description": "predict_house_price_model",
        "peekOfCode": "data = {\n    'area': [1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900],\n    'bedrooms': [3, 3, 2, 4, 3, 4, 5, 3, 2, 4, 3, 4, 3, 2, 5],\n    'bathrooms': [2, 2, 2, 3, 2, 3, 4, 2, 1, 3, 2, 3, 2, 1, 4],\n    'price': [300000, 320000, 340000, 360000, 380000, 400000, 420000, 440000, 460000, 480000, 500000, 520000, 540000, 560000, 580000]  # Preço em dólares\n}\ndf = pd.DataFrame(data)\nX = df[['area', 'bedrooms', 'bathrooms']]\ny = df['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)",
        "detail": "predict_house_price_model",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "predict_house_price_model",
        "description": "predict_house_price_model",
        "peekOfCode": "df = pd.DataFrame(data)\nX = df[['area', 'bedrooms', 'bathrooms']]\ny = df['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\njoblib.dump(model, './models/house_price_model.pkl')\nprint(\"Modelo treinado e salvo como 'house_price_model.pkl'\")\nexchange_rate = 860\npredictions_usd = model.predict(X_test)",
        "detail": "predict_house_price_model",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "predict_house_price_model",
        "description": "predict_house_price_model",
        "peekOfCode": "X = df[['area', 'bedrooms', 'bathrooms']]\ny = df['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\njoblib.dump(model, './models/house_price_model.pkl')\nprint(\"Modelo treinado e salvo como 'house_price_model.pkl'\")\nexchange_rate = 860\npredictions_usd = model.predict(X_test)\npredictions_aoa = predictions_usd * exchange_rate",
        "detail": "predict_house_price_model",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "predict_house_price_model",
        "description": "predict_house_price_model",
        "peekOfCode": "y = df['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\njoblib.dump(model, './models/house_price_model.pkl')\nprint(\"Modelo treinado e salvo como 'house_price_model.pkl'\")\nexchange_rate = 860\npredictions_usd = model.predict(X_test)\npredictions_aoa = predictions_usd * exchange_rate",
        "detail": "predict_house_price_model",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "predict_house_price_model",
        "description": "predict_house_price_model",
        "peekOfCode": "model = LinearRegression()\nmodel.fit(X_train, y_train)\njoblib.dump(model, './models/house_price_model.pkl')\nprint(\"Modelo treinado e salvo como 'house_price_model.pkl'\")\nexchange_rate = 860\npredictions_usd = model.predict(X_test)\npredictions_aoa = predictions_usd * exchange_rate",
        "detail": "predict_house_price_model",
        "documentation": {}
    },
    {
        "label": "exchange_rate",
        "kind": 5,
        "importPath": "predict_house_price_model",
        "description": "predict_house_price_model",
        "peekOfCode": "exchange_rate = 860\npredictions_usd = model.predict(X_test)\npredictions_aoa = predictions_usd * exchange_rate",
        "detail": "predict_house_price_model",
        "documentation": {}
    },
    {
        "label": "predictions_usd",
        "kind": 5,
        "importPath": "predict_house_price_model",
        "description": "predict_house_price_model",
        "peekOfCode": "predictions_usd = model.predict(X_test)\npredictions_aoa = predictions_usd * exchange_rate",
        "detail": "predict_house_price_model",
        "documentation": {}
    },
    {
        "label": "predictions_aoa",
        "kind": 5,
        "importPath": "predict_house_price_model",
        "description": "predict_house_price_model",
        "peekOfCode": "predictions_aoa = predictions_usd * exchange_rate",
        "detail": "predict_house_price_model",
        "documentation": {}
    }
]